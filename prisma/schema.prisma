// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          Role      @default(BUYER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  profile  UserProfile?
  sellerProfile SellerProfile?
  products Product[]
  orders   Order[]
  reviews  ProductReview[]
}

model UserProfile {
  id          String  @id @default(cuid())
  userId      String  @unique
  phone       String?
  address     String?
  city        String?
  state       String?
  country     String?
  postalCode  String?
  dateOfBirth DateTime?
  
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model SellerProfile {
  id                String            @id @default(cuid())
  userId            String            @unique
  businessName      String
  businessType      BusinessType
  description       String?           @db.Text
  website           String?
  phone             String
  businessEmail     String?
  
  // Business Address
  addressLine1      String
  addressLine2      String?
  city              String
  state             String
  country           String
  postalCode        String
  
  // Business Information
  taxId             String
  gstVatNumber      String?
  businessLicense   String
  yearsInBusiness   Int?
  
  // Contact Person
  contactPersonName String
  
  // Social Media & Online Presence
  facebookUrl       String?
  instagramUrl      String?
  linkedinUrl       String?
  twitterUrl        String?
  
  // Business Logo
  logoUrl           String?
  logoFileName      String?
  
  // Payment Information
  bankAccountHolder String?
  bankName          String?
  accountNumber     String?
  ifscSwiftCode     String?
  bankBranchAddress String?
  
  // Product Categories
  productCategories String[]
  
  // Shipping Capabilities
  managesOwnShipping Boolean          @default(true)
  needsShippingHelp Boolean           @default(false)
  
  // Terms Acceptance
  termsAccepted     Boolean           @default(false)
  termsAcceptedAt   DateTime?
  
  // Verification
  verificationStatus VerificationStatus @default(PENDING)
  verificationNotes String?           @db.Text
  verifiedAt        DateTime?
  
  // Ratings and Performance
  averageRating     Float?            @default(0)
  totalRatings      Int               @default(0)
  totalSales        Int               @default(0)
  
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  
  user              User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  documents         SellerDocument[]
  products          Product[]
}

model SellerDocument {
  id            String         @id @default(cuid())
  sellerId      String
  type          DocumentType
  fileName      String
  originalName  String
  fileUrl       String
  status        DocumentStatus @default(PENDING)
  reviewNotes   String?        @db.Text
  uploadedAt    DateTime       @default(now())
  reviewedAt    DateTime?
  
  seller        SellerProfile  @relation(fields: [sellerId], references: [id], onDelete: Cascade)
}

model Product {
  id            String         @id @default(cuid())
  name          String
  description   String         @db.Text
  price         Float
  compareAtPrice Float?
  sku           String?        @unique
  inventory     Int            @default(0)
  weight        Float?
  dimensions    String?
  
  // SEO and URLs
  slug          String         @unique
  metaTitle     String?
  metaDescription String?      @db.Text
  
  // Product Status
  status        ProductStatus  @default(DRAFT)
  featured      Boolean        @default(false)
  
  // Seller Info
  sellerId      String
  sellerUserId  String
  
  // Categories and Tags
  categoryId    String?
  tags          String[]
  
  // Images
  images        ProductImage[]
  
  // Timestamps
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  publishedAt   DateTime?
  
  seller        SellerProfile  @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  sellerUser    User           @relation(fields: [sellerUserId], references: [id], onDelete: Cascade)
  category      Category?      @relation(fields: [categoryId], references: [id])
  orderItems    OrderItem[]
  reviews       ProductReview[]
}

model ProductImage {
  id        String   @id @default(cuid())
  productId String
  url       String
  altText   String?
  position  Int      @default(0)
  createdAt DateTime @default(now())
  
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  slug        String    @unique
  description String?   @db.Text
  image       String?
  parentId    String?
  
  parent      Category? @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryHierarchy")
  products    Product[]
}

model Order {
  id            String      @id @default(cuid())
  orderNumber   String      @unique
  userId        String
  
  // Order Status
  status        OrderStatus @default(PENDING)
  
  // Pricing
  subtotal      Float
  tax           Float       @default(0)
  shipping      Float       @default(0)
  total         Float
  
  // Shipping Address
  shippingName  String
  shippingEmail String
  shippingPhone String?
  shippingLine1 String
  shippingLine2 String?
  shippingCity  String
  shippingState String
  shippingCountry String
  shippingPostal String
  
  // Payment Info
  paymentStatus PaymentStatus @default(PENDING)
  paymentMethod String?
  stripePaymentIntentId String?
  
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  items         OrderItem[]
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Float
  
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model ProductReview {
  id        String   @id @default(cuid())
  productId String
  userId    String
  rating    Int      // 1-5 stars
  title     String?
  comment   String?  @db.Text
  verified  Boolean  @default(false) // Verified purchase
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([productId, userId]) // One review per user per product
}

enum Role {
  BUYER
  SELLER
  ADMIN
}

enum BusinessType {
  INDIVIDUAL
  SOLE_PROPRIETORSHIP
  PARTNERSHIP
  LLC
  CORPORATION
  NONPROFIT
}

enum VerificationStatus {
  PENDING
  IN_REVIEW
  VERIFIED
  REJECTED
  PREMIUM
}

enum DocumentType {
  ID_FRONT
  ID_BACK
  BUSINESS_LICENSE
  TAX_DOCUMENT
  BANK_STATEMENT
  UTILITY_BILL
  BUSINESS_REGISTRATION
  LOGO
}

enum DocumentStatus {
  PENDING
  APPROVED
  REJECTED
}

enum ProductStatus {
  DRAFT
  ACTIVE
  INACTIVE
  OUT_OF_STOCK
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  REFUNDED
}